
/*int fib(int n) {
  return n < 2 ? n : fib(n - 1) + fib(n - 2);
}*//*
float counter = 0;
bool stopped = false;

while (!stopped)
  counter = Animation();

<out: counter; fontSize: 60; onPress: stopped = true;>
*//*
println("Hello")
Timer(1000)
println("Martin")
Timer(2000)
println("Savage")
*//*
string[] firstNames = new ["Martin", "Nathalie", "Audray", "Nathan", "Xavier"];
string[] lastNames = new ["Landau", "Wood", "Hepburn", "Hawthorne", "Charles"];

println("firstNames.size() = " + firstNames.size());/ *
firstNames.remove(2, 2);
lastNames.remove(2, 2);
firstNames.add("John");
lastNames.add("Connor");
firstNames.add("Michael", 1);
lastNames.add("Jackson", 1);
firstNames.set("Firstasd jfka j");
lastNames.set("Las jaslkfjlkdsjflkajfd lka jdft");* /
firstNames.size() {
	{
		; @out(firstNames[&0])
	} @out("First Name") @childdir(2)
	{
		; @out(lastNames[&0])
	} @out("Last Name") @childdir(2)
} @childdir(1) @mtxdir(2)
*//*
10 {
	{
		10 {
			{
				; @out((&1 + 1) * (&0 + 1)) @size(16) @bgcol(0xDDDDDD)
			} @out(&0 + 1) @cdir(1) @bgcol(0x0000FF) @textcol(0xFFFFFF) @size(14)
		} @adir(2) @apack(0)
	} @out(&0 + 1) @cdir(2) @bgcol(0x0000FF) @textcol(0xFFFFFF) @size(14)
} @adir(1) @apack(0)
*/
//<out: y :| 10 x :_ 10 (x + 1) * (y + 1);>
//<out: y:|10 x:_10 (x+1)*(y+1);>
var ar = ["Martin", "Savage"]/*
println("" + ar[1]);
for (int i = 0; i < 5; i++)
  println("Count: " + i)
*//*
var x = :|10 i:_11 12 :\13 14 // int array, continue, l
for (int i = 0; i < 3; i++) {
  Timer(1000);
  println("Count: " + i)
}*/
//var x = new :|10 i:_11 12 :\13 14[ -> {handler}] // ERROR (l)
//var x = :|10 i:_11 12 :\13 method() // r(method) array, continue, l
//var x = new :|10 i:_11 12 :\13 method()[ -> {handler}] // ERROR (l)
//var x = :|10 i:_11 12 :\13 Method() // r(Method) array, wait, L
//var x = new :|10 i:_11 12 :\13 Method()[ -> {handler}] // r(Method) array, continue, L
//var x = :|10 i:_11 12 :\13 new Method()[ -> {handler}] // Method array, continue, l
//var x = new :|10 i:_11 12 :\13 new Method()[ -> {handler}][ -> {handler}] // ERROR (l)
//
//var x = :|10 i:_11 12 :\13 {...} // void array, continue, ll
//var x = new :|10 i:_11 12 :\13 {...}[ -> {handler}] // ERROR (ll)
//var x = :|10 i:_11 12 :\13 new {...} // ERROR (ll)
//var x = new :|10 i:_11 12 :\13 new {...}[ -> {handler}] // ERROR (ll)
//var x = :|10 i:_11 12 :\13 {Method()} // void array, wait, LL
//var x = new :|10 i:_11 12 :\13 {Method()}[ -> {handler}] // void array, continue, LL
//var x = :|10 i:_11 12 :\13 new {Method()}[ -> {handler}] // object array, continue, ll
//var x = new :|10 i:_11 12 :\13 new {Method()}[ -> {handler}][ -> {handler}] // ERROR (ll)
/*int counter = 0
bool stopped = false

// The Timer(100) call waits (e.g. enters in the global event loop)
// for 100 milliseconds but before waiting, it refreshes the UI
// (described at the bottom). When back from waiting, it always
// returns true (making it convenient to embed under while loops)
while (!stopped) {
  Timer(100)
  counter++
}

Timer(2)*//*
println("" + 20%)
var myFirstArray = i::2 j::3 (i + 1) * (j + 1)//(int L() {return (i + 1) * (j + 1);})()
myFirstArray.insert([1, 1], [3, 2])
myFirstArray.insert([0, 0], [1, 1])
/$console.log(myFirstArray)$/

<out: "SS";>//x;>
*//*
var x = i:|10 j:_10 new {
  < out: i;>
  < out: j;>
  < out: i * j;>
};

<out: x;>
*//*
int getInt(int a) {return 2 * a;}

void Button(String text) {
  float shade = 20%

  <out: rect; opacity: shade; size: getInt(17)//[35, -1]
   onPress: shade = 35%//{shade = 35%; captureMouse()}
   onRelease: {shade = 20%; return}>//if (hovering) return()}>
  <out: text; opacity: 60%; align: 50%; fontSize: 40;>
}

int count = 0
var decButton = new Button("-") -> count--
Button *incButton = new Button("+") -> count++
Button But = Button;

<out: oval; color: count > 0 ? COLOR_GREEN : count < 0 ? COLOR_RED : COLOR_YELLOW;
  <_ color: COLOR_BLACK;
    <out: decButton;>
    <size: [100, 80];
      <out: count; opacity: 70%; align: 50%; fontSize: 50;>
    >
    <out: incButton;>
  >
>
*/
void Ball() {
  void Vector(float pos, float delta) {
    void move() {
      pos += delta

      if (pos > 1 || pos < 0) {
        pos = delta > 0 ? 2 - pos : -pos
        delta = -delta
      }
    }
  }

  int color = trunc(rand() * 0xFFFFFF)
  int size = rand() * 35 + 35
  Vector*[] vectors = 2 new Vector(rand(), ((rand() * 1%) + 0.025%) * (rand() > 0.5 ? 1 : -1))

  while (Yield(/$Ball$this$/)) {
//    v::vectors v.move()
    vectors[0].move();
    vectors[1].move();
  }

  <out: oval; color: color; size: size; align: [vectors[0].pos, vectors[1].pos];>
//  <out: oval; color: color; size: size; align: v::vectors v.pos;>
}

Ball*[] balls = 30 new Ball()

void CounterWidget() {
  void Button(String text) {
    float shade = 20%

    <out: rect; opacity: shade; size: [40, 90]; onPress: shade = 35%; onRelease: {shade = 20%; return}>
    <out: text; opacity: 60%; align: 50%; fontSize: 40;>
  }

  Button *incButton = new Button("+") -> balls++
  Button *decButton = new Button("-") -> if (balls.size() > 0) balls--

  <out: roundRect; color: 0xFFFFFF; opacity: 80%;
    <_ color: COLOR_BLACK;
      <out: decButton;>
      <size: [120, 90];
        <out: balls.size(); opacity: 50%; align: 50%; fontSize: 60;>
      >
      <out: incButton;>
    >
  >
}

CounterWidget *counter = new CounterWidget()

while (Animation())
  process(balls);

<out:rect; size:[800, 480]; color: 0x404040;>
<out:"Bouncing"; fontSize:130; color: 0xFFFFFF; opacity: 9/16; align: [50%, 10%];>
<out:"Balls!!"; fontSize:160; color: 0xFFFFFF; opacity: 3/4; align: [50%, 70%];>
<out:balls;>
<out:counter; align: 95%;>
/*
void Ball() {
  void Vector(float pos, float delta) {
    void move() {
      pos += delta

      if (pos > 1 || pos < 0) {
        pos = delta > 0 ? 2 - pos : -pos
        delta = -delta
      }
    }
  }

  int color = rand() * 0xFFFFFF
  int size = rand() * 25 + 15
  Vector*[] vectors = 2 new Vector(rand(), (rand() * 0.15) + 0.01)

  while (Yield(/$Ball$this$/)) {
    vectors[0].move();
    vectors[1].move();
  }

  <out: oval; color: color; size: size; align: [vectors[0].pos, vectors[1].pos];>
}

Ball*[] balls = 3 new Ball()

while (Animation())
  process(balls);

<out:"Bouncing"; size:130; color: 0x50FFFFFF; align: [50%, 10%];>
<out:"Balls!!"; size:160; color: 0x30FFFFFF; align: [50%, 70%];>
<out: balls[0];>
*/